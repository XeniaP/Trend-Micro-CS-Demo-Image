name: Trend Vision Artifact Scanner
on: 
  push:
    branches: 
      - master
permissions:
  id-token: write
  contents: read

env:
  IMAGE_NAME: ${{ github.repository }}
  

jobs:
    BuildImage:
      runs-on: ubuntu-latest
      environment: DockerRegistry
      steps:
        - name: Git clone the repository
          uses: actions/checkout@v3
        - name: Docker meta
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: |
              demo-app/app
              ghcr.io/xeniap/demo-app            
            # generate Docker tags based on the following events/attributes
            tags: |
              type=schedule
              type=ref,event=branch
              type=ref,event=pr
              type=semver,pattern={{version}}
              type=semver,pattern={{major}}.{{minor}}
              type=semver,pattern={{major}}
              type=sha
        - name: Set up QEMU
          uses: docker/setup-qemu-action@v2
        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v2 
    PushImagetoRegistry:
      runs-on: ubuntu-latest
      environment: DockerRegistry
      needs: [BuildImage]
      steps:
        - name: Login to GitHub Container Registry
          uses: docker/login-action@v3
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
    TrendMicroArtifactScan:
      runs-on: ubuntu-latest
      environment: DockerRegistry
      needs: [PushImagetoRegistry]
      steps:
        - name: Trend Cloud One Container Security Scan Action
          uses: trendmicro/cloudone-container-security-github-action@1.0.10
          with:
              # Mandatory
              TMAS_API_KEY: ${{ secrets.API_KEY }}
              REGION: us-east-1
              SBOM: true # Saves SBOM to SBOM.json so you can export it as an artifact later.
              IMAGE: xniapdev/django-app:45 # The image need to be public or the pipeline need to have access to the private image of choice.
              # For each threshold below, select the maximum number of vulnerabilities that are acceptable.
              MAX_TOTAL: 1000
              MAX_CRITICAL: 500
              MAX_HIGH: 500
              MAX_MEDIUM: 500
              MAX_LOW: 500
              MAX_NEGLIGIBLE: 500
              MAX_UNKNOWN: 500
              SCAN_RESULT_ARTIFACT: result.json # Save as an artifact in GitHub to be able to keep the result of the scan.
        - name: 'Upload Scan Result Artifact'
          uses: actions/upload-artifact@v3
          with:
            name: scan-result
            path: result.json
            retention-days: 30
        - name: 'Upload SBOM Artifact'
          uses: actions/upload-artifact@v3
          with:
            name: sbom
            path: SBOM.json
            retention-days: 30
