AWSTemplateFormatVersion: '2010-09-09'
Description: Template to automatically setup AWS EC2 AWS for Asset Scanning
Metadata:
  Author: ""
  Version: "1.0"
  Updated: ""
  Version Comments: ""
Parameters:
  UserName:
    Default: empty
    Description: User Authorized to Create a Virtual Scanner
    Type: String
  Password:
    Default: empty
    Description: Password of the User Authorized to Create an Virtual Scanner
    Type: String
    NoEcho: true
  SCANNERNAME:
    Default: Empty
    Description: (Optional) name you want to give to your scanner appliance
    Type: String
  InstanceType:
    Description: Scanner instance size
    Type: String
    Default: t2.medium
    AllowedValues:
     - t2.medium
     - t2.large
     - m4.large
     - m4.xlarge
     - m3.large
     - m3.xlarge
     - c4.large
     - c4.xlarge
     - c4.2xlarge
     - c3.large
     - c3.xlarge
     - c3.2xlarge
     - r3.large
  Subnets:
    Description: Select subnet to launch scanner in
    Type: AWS::EC2::Subnet::Id

Resources:
  AWSFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          SCANNERNAME: !Ref SCANNERNAME
          USERNAME: !Ref UserName
          PASSWORD: !Ref Password
      Code:
        ZipFile: !Sub |
          def lambda_handler(event, context):
            import boto3
            import xml.etree.ElementTree as ET
            import cfnresponse
            import os
            import sys
            region = context.invoked_function_arn.split(":")[3]
            accountId = context.invoked_function_arn.split(":")[4]
            SCANNERNAME = os.getenv('SCANNERNAME')
            username = os.getenv('USERNAME')
            password = os.getenv('PASSWORD')
            ec2 = boto3.client('ec2')
            filters = [{'Name': 'name', 'Values': ['*1b8af947-aa54-4852-9da6-282428ba2f46*']}]
            images = ec2.describe_images(Filters=filters)
            a = images['Images']
            c = images['Images'][0]['CreationDate']
            for i in range (len(a)-1):
                j = 0
                if c < images['Images'][i]['CreationDate']:
                    c= images['Images'][i]['CreationDate']
                    j = i
            AMIID = images['Images'][j]['ImageId']
            qurl = 'curl -u {}:{} -H "X-Requested-With:Curl" -X "POST" -d "action=create&echo_request=1&name={}" "{}/api/2.0/fo/appliance/"'.format(username, password,SCANNERNAME)
            result = os.popen(qurl).read()
            tree = ET.fromstring(result)
            PERS = tree.find('RESPONSE/APPLIANCE/ACTIVATION_CODE').text
            responseData = {}
            responseData['PERS'] = PERS
            responseData['AMIID'] = AMIID
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
      Description: Lambda Function to create a Virtual Scanner in QCP
      Handler: index.lambda_handler
      Role: !GetAtt 'LambdaExecutionRole.Arn'
      Runtime: python2.7
      Timeout: '120'
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:CreateRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - ec2:Describe*
                Resource: '*'
  MyEC2:
    DependsOn: AWSFunction
    Type: "AWS::EC2::Instance"
    Properties:
     ImageId: !GetAtt 'CustomResource.AMIID'
     SubnetId: !Ref Subnets
     InstanceType: !Ref InstanceType
     Tenancy: Dedicated
     SecurityGroupIds:
      - !GetAtt ExampleSG.GroupId
     UserData:
      Fn::Base64: !Sub |
       PERSCODE=${CustomResource.PERS}

  ExampleSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: allow connections from specified CIDR ranges
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: All
        IpProtocol: tcp
        ToPort: All

  CustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt 'AWSFunction.Arn'
Outputs:
  PERS:
    Description: Personalization Code.
    Value: !GetAtt 'CustomResource.PERS'
